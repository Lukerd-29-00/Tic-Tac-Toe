{"version":3,"sources":["tic-tac-toe/hooks/useRows.ts","tic-tac-toe/components/TicTacToeBoard.tsx","tic-tac-toe/components/TicTacToeDashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["emptySquares","output","Array","i","length","row","j","isValidTurn","turn","TicTacToeBoard","props","useState","rows","updateRows","column","newRows","newRow","useRows","updateSquare","clearBoard","changeTurn","winner","setWinner","newWinner","board","victory_triplets","tie","lastTurn","ctr","getSquare","win","counter","X","O","empty","cmp","square","Winner","className","map","array","value","onClick","disabled","Math","floor","Error","TicTacToeDashboard","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAEA,SAASA,IAEL,IADA,IAAMC,EAASC,MAA+B,GACtCC,EAAI,EAAEA,EAAIF,EAAOG,OAAOD,IAAI,CAEhC,IADA,IAAIE,EAAM,IAAIH,MAAY,GAClBI,EAAI,EAAEA,EAAID,EAAID,OAAOE,IACzBD,EAAIC,GAAK,KAEjBL,EAAOE,GAAKE,EAEZ,OAAOJ,E,WCJX,SAASM,EAAYC,GACjB,MAAgB,MAATA,GAAyB,MAATA,EAGpB,SAASC,EAAeC,GAC3B,MDEG,WACH,MAA2BC,mBAASX,GAApC,mBAAOY,EAAP,KAAaC,EAAb,KA2BA,MAAO,CAACD,EA1Ba,SAACE,EAAeT,EAAYG,GAG7C,IAFA,IAAIO,EAAU,IAAIb,MAA+B,GAC7Cc,EAAS,IAAId,MAAwB,GACjCC,EAAI,EAAEA,EAAIa,EAAOZ,OAAOD,IAExBa,EAAOb,GADRA,IAAMW,EACOF,EAAKP,GAAKF,GAGVK,EAGpB,IAAI,IAAIL,EAAI,EAAEA,EAAIY,EAAQX,OAAOD,IAEzBY,EAAQZ,GADTA,IAAME,EACQO,EAAKT,GAGLa,EAGrBH,EAAWE,IAIE,WACbF,EAAWb,OC5B0BiB,GAAzC,mBAAOL,EAAP,KAAaM,EAAb,KAA2BC,EAA3B,KACA,EAA2BR,mBAAS,KAApC,mBAAOH,EAAP,KAAaY,EAAb,KACA,EAA4BT,mBAAS,UAArC,mBAAOU,EAAP,KAAeC,EAAf,KACIC,EAAY,KAQhB,OAPGhB,EAAYC,KACXe,EA0CR,SAAgBC,EAAsChB,GAclD,IAbA,IAAMiB,EAAmB,CACrB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAELC,GAAM,EACNC,GAAW,EACXC,EAAM,EACFzB,EAAI,EAAEA,EAAI,EAAEA,IACU,OAAvB0B,EAAUL,EAAMrB,IACfyB,IAGLA,GAAO,IACND,GAAW,GAEf,IAAI,IAAIG,EAAM,EAAEA,EAAML,EAAiBrB,OAAO0B,IAAM,CAGhD,IAFA,IAAIC,EAAmB,CAACC,EAAG,EAAEC,EAAG,EAAEC,MAAO,GACrCC,EAAMN,EAAUL,EAAMC,EAAiBK,GAAK,IACxC3B,EAAI,EAAEA,EAAI,EAAEA,IAAI,CACpB,IAAIiC,EAASP,EAAUL,EAAMC,EAAiBK,GAAK3B,IACrC,OAAXiC,EACCL,EAAQG,QAEO,MAAXE,EACJL,EAAQC,IAGRD,EAAQE,IAIhB,GAAiB,IAAdF,EAAQC,GAAyB,IAAdD,EAAQE,EAC1B,OAAOE,EAERR,GAAqB,MAATnB,EACXuB,EAAQE,IAEJN,GAAqB,MAATnB,GAChBuB,EAAQC,IAERD,EAAQC,EAAID,EAAQG,QAAU,GAAOH,EAAQE,EAAIF,EAAQG,QAAU,IACnER,GAAM,GAGd,OAAOA,EAAM,MAAQ,KA7FLW,CAAOzB,EAAKJ,IAEX,OAAde,GAAiC,WAAXF,GACrBC,EAAUC,GAIV,qCACA,qBAAKe,UAAU,YAAf,SACgB,WAAXjB,EAAsB,8BAAIb,EAAJ,aAAkC,QAAXa,EAAmB,qCAAc,yCAAYA,OAE/F,sBAAKiB,UAAU,aAAf,UACK1B,EAAK2B,KAAI,SAAClC,EAA6BF,EAAWqC,GAC/C,OAAO,qBAAaF,UAAU,YAAvB,SACFE,EAAMrC,GAAGoC,KAAI,SAACE,EAAwBnC,GACnC,GAAGC,EAAYC,GACX,OAAO,wBAAsCkC,QAAS,WAAOxB,EAAaZ,EAAEH,EAAEK,GAAOY,EAAoB,MAATZ,EAAe,IAAM,MAAOmC,SAAqB,WAAXtB,GAAqC,MAAdT,EAAKT,GAAGG,GAA9J,SAA2KmC,GAA9JG,KAAKC,MAAM1C,EAAE,GAAKG,EAAI,GAG1C,MAAMwC,MAAM,kBAAD,OAAmBtC,QANzBL,MAWrB,wBAAQuC,QAAS,WAAOpB,EAAU,UAAWH,IAAcC,EAAW,MAAtE,yBAQZ,SAASS,EAAUL,EAAsCrB,GACrD,OAAOqB,EAAMoB,KAAKC,MAAM1C,EAAE,IAAIA,EAAI,GC5C/B,SAAS4C,EAAmBrC,GAC/B,OACI,oCACI,8BACI,cAACD,EAAD,MAEJ,mCACI,4BAAG,mBAAGuC,KAAK,4CAAR,wBACH,4BAAG,mBAAGA,KAAK,0EAAR,2BACH,4BAAG,mBAAGA,KAAK,4CAAR,qCCJJC,MANf,WACE,OACE,cAACF,EAAD,KCOWG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9df701a3.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction emptySquares(){\r\n    const output = Array<Array<\"X\" | \"O\" | null>>(3);\r\n    for(let i = 0;i < output.length;i++){\r\n        let row = new Array<null>(3);\r\n        for(let j = 0;j < row.length;j++){\r\n            row[j] = null;\r\n        }\r\n    output[i] = row;\r\n    }\r\n    return output;\r\n}\r\n\r\nexport function useRows(): [Array<Array<\"X\" | \"O\" | null>>,(column: number, row: number, turn: \"X\" | \"O\") => undefined, () => void]{\r\n    const [rows, updateRows] = useState(emptySquares);\r\n    const updateSquare = (column: number,row: number,turn: \"X\" | \"O\") => {\r\n        let newRows = new Array<Array<\"X\" | \"O\" | null>>(3);\r\n        let newRow = new Array<\"X\" | \"O\" | null>(3);\r\n        for(let i = 0;i < newRow.length;i++){\r\n            if(i !== column){\r\n                newRow[i] = rows[row][i]\r\n            }\r\n            else{\r\n                newRow[i] = turn;\r\n            }\r\n        }\r\n        for(let i = 0;i < newRows.length;i++){\r\n            if(i !== row){\r\n                newRows[i] = rows[i]\r\n            }\r\n            else{\r\n                newRows[i] = newRow;\r\n            }\r\n        }\r\n        updateRows(newRows);\r\n        return undefined;\r\n        \r\n    }\r\n    const emptyAll = () => {\r\n        updateRows(emptySquares());\r\n    }\r\n    return [rows, updateSquare, emptyAll];\r\n\r\n}","import { useState } from \"react\";\r\nimport { useRows } from \"../hooks/useRows\";\r\n\r\ninterface empty {\r\n\r\n}\r\n\r\nfunction isValidTurn(turn: string):turn is \"X\" | \"O\"{\r\n    return turn === \"X\" || turn === \"O\";\r\n}\r\n\r\nexport function TicTacToeBoard(props: empty): JSX.Element{\r\n    const [rows, updateSquare, clearBoard] = useRows();\r\n    const [turn, changeTurn] = useState(\"X\");\r\n    const [winner, setWinner] = useState(\"nobody\");\r\n    let newWinner = null;\r\n    if(isValidTurn(turn)){\r\n        newWinner = Winner(rows,turn);\r\n    }\r\n    if(newWinner !== null && winner === \"nobody\"){\r\n        setWinner(newWinner);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"game-info\">\r\n            {winner === \"nobody\" ? <p>{turn}'s turn</p> : winner === \"tie\" ? <p>Tie!</p> : <p>Winner: {winner}</p>}\r\n        </div>\r\n        <div className=\"game-board\">\r\n            {rows.map((row: Array<\"X\" | \"O\" | null>,i: number, array: Array<Array<\"X\" | \"O\" | null>>) => {\r\n                return <div key={i} className=\"board-row\">\r\n                    {array[i].map((value: \"X\" | \"O\" | null,j: number) => {\r\n                        if(isValidTurn(turn)){\r\n                            return <button key={Math.floor(i/3) + j % 3} onClick={() => {updateSquare(j,i,turn); changeTurn(turn === \"X\" ? \"O\" : \"X\")}} disabled={winner !== \"nobody\" || rows[i][j] != null}>{value}</button>\r\n                        }\r\n                        else{\r\n                            throw Error(`Invalid player ${turn}`);\r\n                        }\r\n                    })}\r\n                </div>\r\n            })}\r\n            <button onClick={() => {setWinner(\"nobody\"); clearBoard(); changeTurn(\"X\");}}>reset</button>\r\n        </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction getSquare(board: Array<Array<\"X\" | \"O\" | null>>,i: number): \"X\" | \"O\" | null{\r\n    return board[Math.floor(i/3)][i % 3]\r\n}\r\n\r\ninterface Counter {\r\n    X: number,\r\n    O: number,\r\n    empty: number\r\n}\r\n\r\nfunction Winner(board: Array<Array<\"X\" | \"O\" | null>>,turn: \"X\" | \"O\"): \"X\" | \"O\" | \"tie\" | null{\r\n    const victory_triplets = [\r\n        [0,1,2],\r\n        [0,3,6],\r\n        [0,4,8],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [3,4,5],\r\n        [6,4,2],\r\n        [6,7,8]\r\n    ]\r\n    let tie = true;\r\n    let lastTurn = true;\r\n    let ctr = 0;\r\n    for(let i = 0;i < 9;i++){\r\n        if(getSquare(board,i) === null){\r\n            ctr++;\r\n        }\r\n    }\r\n    if(ctr >= 2){\r\n        lastTurn = false;\r\n    }\r\n    for(let win = 0;win < victory_triplets.length;win++){\r\n        let counter: Counter = {X: 0,O: 0,empty: 0}\r\n        let cmp = getSquare(board,victory_triplets[win][0])\r\n        for(let i = 0;i < 3;i++){\r\n            let square = getSquare(board,victory_triplets[win][i]);\r\n            if(square === null){\r\n                counter.empty++;\r\n            }\r\n            else if(square === \"X\"){\r\n                counter.X++;\r\n            }\r\n            else{\r\n                counter.O++;\r\n            }\r\n\r\n        }\r\n        if(counter.X === 3 || counter.O === 3){\r\n            return cmp;\r\n        }\r\n        if(lastTurn && turn === \"X\"){\r\n            counter.O--;\r\n        }\r\n        else if(lastTurn && turn === \"O\"){\r\n            counter.X--;\r\n        }\r\n        if((counter.X + counter.empty === 3) || (counter.O + counter.empty === 3)){\r\n            tie = false;\r\n        }\r\n    }\r\n    return tie ? \"tie\" : null;\r\n}","import { TicTacToeBoard } from \"./TicTacToeBoard\";\r\n\r\n\r\ninterface noprops {\r\n\r\n}\r\nexport function TicTacToeDashboard(props: noprops){\r\n    return (\r\n        <section>\r\n            <div>\r\n                <TicTacToeBoard />\r\n            </div>\r\n            <footer>\r\n                <p><a href=\"https://lukerd-29-00.github.io/Portfolio/\">Homepage</a></p>\r\n                <p><a href=\"https://github.com/Lukerd-29-00/Tic-Tac-Toe/tree/source/src/tic-tac-toe\">Source code</a></p>\r\n                <p><a href=\"https://github.com/Lukerd-29-00/Portfolio\">Main repository</a></p>\r\n            </footer>\r\n        </section>\r\n\r\n    )\r\n}","import './App.scss';\r\nimport { TicTacToeDashboard } from './tic-tac-toe/components/TicTacToeDashboard';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <TicTacToeDashboard/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}